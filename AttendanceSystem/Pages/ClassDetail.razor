@page "/student/class/{Id:int}"
@using System.Globalization
@using Microsoft.EntityFrameworkCore
@using AttendanceSystem.Data.Models
@inject AttendanceDbContext DbContext
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<div class="container mx-auto p-4">
    @if (CurrentClass != null)
    {
        <h1 class="text-2xl font-bold mb-4">@CurrentClass.Name - Attendance Details</h1>

        <div class="mb-4 border rounded-md shadow-sm">
            <div class="flex justify-between items-center p-4 border-b">
                <h2 class="text-xl font-semibold">Attendance Record</h2>
                @if (ShouldShowAddAttendanceButton())
                {
                    <button type="button"
                            style="background-color: #007bff; color: white; padding: 10px 20px; border: none; border-radius: 5px; cursor: pointer;"
                            @onclick="ShowQuestionPrompt"
                            onmouseover="this.style.backgroundColor='#0056b3'"
                            onmouseout="this.style.backgroundColor='#007bff'">
                        Add Attendance Record
                    </button>
                }
                else
                {
                    <div class="text-gray-500">
                        Attendance can only be recorded within 1 hour of class time
                    </div>
                }
            </div>

            <!-- Question prompt dialog -->
            @if (IsQuestionPromptVisible)
            {
                <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-10">
                    <div class="bg-white p-6 rounded-lg shadow-lg max-w-md w-full">
                        <h3 class="text-xl font-semibold mb-4">Daily Question</h3>
                        <p class="mb-4">@DailyQuestion</p>

                        <textarea class="w-full p-2 border rounded mb-4"
                                  rows="4"
                                  placeholder="Type your answer here..."
                                  @bind="StudentAnswer">
                                        </textarea>

                        <div class="flex justify-end space-x-2">
                            <button class="px-4 py-2 bg-gray-300 rounded"
                                    @onclick="CancelQuestionPrompt">
                                Cancel
                            </button>
                            <button class="px-4 py-2 bg-blue-500 text-white rounded"
                                    @onclick="SubmitAnswerAndAddAttendance">
                                Submit
                            </button>
                        </div>
                    </div>
                </div>
            }

            <table class="w-full border-collapse">
                <thead>
                    <tr class="bg-gray-100">
                        <th class="p-2 text-left">Date</th>
                        <th class="p-2 text-left">Status</th>
                    </tr>
                </thead>
                <tbody>
                    @if (CurrentClass.AttendanceRecords.Any())
                    {
                        @foreach (var record in CurrentClass.AttendanceRecords.OrderByDescending(r => r.Date))
                        {
                            <tr>
                                <td class="p-2">@record.Date.ToString("MM/dd/yyyy")</td>
                                <td class="p-2">
                                    <span class="@(record.Status == "Present" ? "text-green-600" : "text-red-600")">
                                        @record.Status
                                    </span>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td class="p-2 text-center" colspan="2">No attendance records found</td>
                        </tr>
                    }
                </tbody>
            </table>
            <div style="padding-top: 1rem;"></div>
        </div>

        <div class="border rounded-md shadow-sm p-4">
            <h2 class="text-xl font-semibold mb-3 border-b pb-2">Class Information</h2>
            <div class="grid md:grid-cols-2 gap-4">
                <div>
                    <p><strong>Instructor:</strong> @CurrentClass.Instructor</p>
                    <p><strong>Time:</strong> @CurrentClass.Time</p>
                    <p><strong>Room:</strong> @CurrentClass.Room</p>
                    <p><strong>Total Students:</strong> @CurrentClass.Students</p>
                </div>

                <div>
                    <h3 class="text-lg font-semibold mb-2 border-b pb-2">Attendance Summary</h3>
                    <p><strong>Total Classes:</strong> @CurrentClass.AttendanceRecords.Count</p>
                    <p><strong>Days Present:</strong> @PresentDays</p>
                    <p><strong>Days Absent:</strong> @AbsentDays</p>
                    <p>
                        <strong>Attendance Percentage: </strong>
                        @if (CurrentClass.AttendanceRecords.Any())
                        {
                            <span class="@(AttendancePercentage >= 75 ? "text-green-600" : "text-red-600")">
                                @AttendancePercentage%
                            </span>
                        }
                        else
                        {
                            <span><strong>No data</strong></span>
                        }
                    </p>
                </div>
            </div>
        </div>
    }
    else
    {
        <p>Class not found.</p>
    }

    @if (!string.IsNullOrEmpty(DebugMessage))
    {
        <div class="bg-yellow-100 border border-yellow-400 text-yellow-700 px-4 py-3 rounded mb-4 mt-4">
            @DebugMessage
        </div>
    }
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    private ClassItem? CurrentClass { get; set; }
    private int PresentDays { get; set; }
    private int AbsentDays { get; set; }
    private double AttendancePercentage { get; set; }
    private string DebugMessage { get; set; } = "";

    // Question handling properties
    private bool IsQuestionPromptVisible { get; set; } = false;
    private string DailyQuestion { get; set; } = "";
    private string StudentAnswer { get; set; } = "";


    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Get the student ID - replace with actual auth logic when implemented
            var studentId = 2;

            // Get the class from the database
            var dbClass = await DbContext.Classes
                .FirstOrDefaultAsync(c => c.ClassID == Id);

            string instructorName = "Unknown";

            if (dbClass != null)
            {
                var instructor = await DbContext.Users.FirstOrDefaultAsync(u => u.UserID == dbClass.InstructorID);
                instructorName = instructor != null ? instructor.FirstName + " " + instructor.LastName : "Unknown";

                // Get attendance records for this student and class
                var attendanceRecords = await DbContext.AttendanceRecords
                    .Where(ar => ar.ClassID == Id && ar.StudentID == studentId)
                    .ToListAsync();

                // Create the ClassItem for display
                CurrentClass = new ClassItem(
                    dbClass.ClassID,
                    dbClass.Name,
                    instructorName,
                    dbClass.Time,
                    dbClass.Room,
                    dbClass.TotalStudents,
                    attendanceRecords.Select(ar => new AttendanceRecord
                        {
                            Date = ar.Date,
                            Status = ar.Status
                        }).ToList()
                );

                // Calculate statistics
                PresentDays = CurrentClass.AttendanceRecords.Count(r => r.Status == "Present");
                AbsentDays = CurrentClass.AttendanceRecords.Count(r => r.Status == "Absent");

                if (CurrentClass.AttendanceRecords.Any())
                {
                    AttendancePercentage = Math.Round((double)PresentDays / CurrentClass.AttendanceRecords.Count * 100, 2);
                }
                else
                {
                    AttendancePercentage = 0;
                }
            }
        }
        catch (Exception ex)
        {
            DebugMessage = $"Error loading data: {ex.Message}";
        }
    }


    private bool ShouldShowAddAttendanceButton()
    {
        if (CurrentClass == null) return false;

        var classTime = CurrentClass.Time;
        var today = DateTime.Now;

        if (classTime.Contains("Mon/Wed") && (today.DayOfWeek == DayOfWeek.Monday || today.DayOfWeek == DayOfWeek.Wednesday))
        {
            return IsWithinOneHour(classTime, "Mon/Wed", today);
        }
        else if (classTime.Contains("Tue/Thu") && (today.DayOfWeek == DayOfWeek.Tuesday || today.DayOfWeek == DayOfWeek.Thursday))
        {
            return IsWithinOneHour(classTime, "Tue/Thu", today);
        }
        else if (classTime.Contains("Fri") && (today.DayOfWeek == DayOfWeek.Friday))
        {
            return true;
        }

        return false;
    }

    private bool IsWithinOneHour(string classTime, string days, DateTime today)
    {
        var timePart = classTime.Replace(days, "").Trim();
        if (DateTime.TryParseExact(timePart, "h:mm tt", CultureInfo.InvariantCulture, DateTimeStyles.None, out DateTime classDateTime))
        {
            var classToday = new DateTime(today.Year, today.Month, today.Day, classDateTime.Hour, classDateTime.Minute, 0);
            return today >= classToday.AddHours(-1) && today <= classToday.AddHours(1);
        }
        return false;
    }

    // Show question prompt and fetch selected question
    private async Task ShowQuestionPrompt()
    {
        try
        {
            // Fetch the selected question for this class
            var selectedQuestion = await DbContext.Questions
                .Where(q => q.ClassID == Id && q.Selected)
                .FirstOrDefaultAsync();

            if (selectedQuestion != null)
            {
                DailyQuestion = selectedQuestion.QuestionText;
                IsQuestionPromptVisible = true;
            }
            else
            {
                // Fallback if no selected question exists
                DailyQuestion = "No question has been selected for today. Please submit attendance anyway.";
                IsQuestionPromptVisible = true;
            }
        }
        catch (Exception ex)
        {
            DebugMessage = $"Error loading question: {ex.Message}";
        }

        StateHasChanged();
    }

    // Cancel question prompt
    private void CancelQuestionPrompt()
    {
        IsQuestionPromptVisible = false;
        StudentAnswer = "";
        StateHasChanged();
    }

    // Submit answer and add attendance record
    private async Task SubmitAnswerAndAddAttendance()
    {
        try
        {
            var studentId = 2; // Replace with actual student ID from auth
            var today = DateTime.Now.Date;

            // 1. Create question response entity
            if (!string.IsNullOrEmpty(DailyQuestion) && !string.IsNullOrEmpty(StudentAnswer))
            {
                // Create a new QuestionResponse entity (not a view model)
                var questionResponse = new QuestionResponse
                    {
                        QuestionText = DailyQuestion,
                        StudentID = studentId,
                        ClassID = Id,
                        Answer = StudentAnswer
                    };

                // Add to DbContext
                DbContext.QuestionResponses.Add(questionResponse);
            }

            // 2. Create attendance record if it doesn't exist for today
            if (!CurrentClass.AttendanceRecords.Any(r => r.Date.Date == today))
            {
                // Create a new AttendanceRecord entity (not a view model)
                var newRecord = new AttendanceSystem.Data.Models.AttendanceRecord
                    {
                        Date = today,
                        Status = "Present",
                        ClassID = Id,
                        StudentID = studentId
                    };

                // Add to DbContext
                DbContext.AttendanceRecords.Add(newRecord);

                // Save both changes in one transaction
                await DbContext.SaveChangesAsync();

                // Update view model
                CurrentClass.AttendanceRecords.Add(new AttendanceRecord
                    {
                        Date = today,
                        Status = "Present"
                    });

                // Update statistics
                PresentDays = CurrentClass.AttendanceRecords.Count(r => r.Status == "Present");
                AbsentDays = CurrentClass.AttendanceRecords.Count(r => r.Status == "Absent");
                AttendancePercentage = Math.Round((double)PresentDays / CurrentClass.AttendanceRecords.Count * 100, 2);

                DebugMessage = "Successfully recorded attendance and saved your answer.";
            }
            else
            {
                // Just save the question response if attendance already exists
                await DbContext.SaveChangesAsync();
                DebugMessage = "Saved your answer. Attendance record for today already exists.";
            }

            // Close the prompt
            IsQuestionPromptVisible = false;
            StudentAnswer = "";
        }
        catch (Exception ex)
        {
            DebugMessage = $"Error saving data: {ex.Message}";
        }

        StateHasChanged();
    }

    public class ClassItem
    {
        public int? Id { get; set; }
        public string? Name { get; set; }
        public string? Instructor { get; set; }
        public string? Time { get; set; }
        public string? Room { get; set; }
        public int? Students { get; set; }
        public List<AttendanceRecord> AttendanceRecords { get; set; }

        public ClassItem(int id, string name, string instructor, string time, string room, int students, List<AttendanceRecord> attendanceRecords)
        {
            Id = id;
            Name = name;
            Instructor = instructor;
            Time = time;
            Room = room;
            Students = students;
            AttendanceRecords = attendanceRecords ?? new List<AttendanceRecord>();
        }
    }

    public class AttendanceRecord
    {
        public DateTime Date { get; set; }
        public required string Status { get; set; } = "Absent";
    }
}