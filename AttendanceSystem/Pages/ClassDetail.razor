@page "/student/class/{Id:int}"
@using System.Globalization
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<div class="container mx-auto p-4">
    <p>Debug: @DebugMessage</p>

    @if (CurrentClass != null)
    {
        <h1 class="text-2xl font-bold mb-4">@CurrentClass.Name - Attendance Details</h1>
        
        <div class="bg-white shadow rounded-lg p-6 mb-4">
            <div class="flex justify-between items-center mb-4">
                <h2 class="text-xl font-semibold">Attendance Record</h2>
                @if (ShouldShowAddAttendanceButton())
                {
                    <button type="button"
                        style="background-color: #007bff; color: white; padding: 10px 20px; border: none; border-radius: 5px; cursor: pointer;"
                        @onclick="AddAttendanceRecordWithLogging"
                        onmouseover="this.style.backgroundColor='#0056b3'"
                        onmouseout="this.style.backgroundColor='#007bff'">
                        Add Attendance Record
                    </button>
                }
                else
                {
                    <div class="text-gray-500">
                        Attendance can only be recorded within 1 hour of class time
                    </div>
                }
            </div>

            <table class="w-full border-collapse">
                <thead>
                    <tr class="bg-gray-100">
                        <th class="border p-2 text-left">Date</th>
                        <th class="border p-2 text-left">Status</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var record in CurrentClass.AttendanceRecords.OrderByDescending(r => r.Date))
                    {
                        <tr>
                            <td class="border p-2">@record.Date.ToString("MM/dd/yyyy")</td>
                            <td class="border p-2">
                                <span class="@(record.Status == "Present" ? "text-green-600" : "text-red-600")">
                                    @record.Status
                                </span>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <div class="bg-white shadow rounded-lg p-6">
            <h2 class="text-xl font-semibold mb-3">Class Information</h2>
            <div class="grid md:grid-cols-2 gap-4">
                <div>
                    <p><strong>Instructor:</strong> @CurrentClass.Instructor</p>
                    <p><strong>Time:</strong> @CurrentClass.Time</p>
                    <p><strong>Room:</strong> @CurrentClass.Room</p>
                    <p><strong>Credits:</strong> @CurrentClass.Credits</p>
                </div>
                
                <div>
                    <h3 class="text-lg font-semibold mb-2">Attendance Summary</h3>
                    <p><strong>Total Classes:</strong> @CurrentClass.AttendanceRecords.Count</p>
                    <p><strong>Days Present:</strong> @PresentDays</p>
                    <p><strong>Days Absent:</strong> @AbsentDays</p>
                    <p><strong>Attendance Percentage:</strong> 
                        <span class="@(AttendancePercentage >= 75 ? "text-green-600" : "text-red-600")">
                            @AttendancePercentage%
                        </span>
                    </p>
                </div>
            </div>
        </div>
    }
    else
    {
        <p>Class not found.</p>
    }
    
    @* <button @onclick="TestButtonClick" class="mt-4 p-2 bg-gray-200 hover:bg-gray-300 rounded">
        Test Button (Click Me)
    </button> *@
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    private ClassItem? CurrentClass { get; set; }
    private int PresentDays { get; set; }
    private int AbsentDays { get; set; }
    private double AttendancePercentage { get; set; }
    private string DebugMessage { get; set; } = "Initial state";

    protected override void OnInitialized()
    {
        DebugMessage = "OnInitialized called";
        
        var classes = new List<ClassItem>
        {
            new ClassItem
            {
                Id = 1,
                Name = "Mathematics 101",
                Instructor = "Dr. Smith",
                Time = "Mon/Wed 10:00 AM",
                Room = "Science Building, Room 302",
                Credits = 3,
                AttendanceRecords = new List<AttendanceRecord>
                {
                    new AttendanceRecord { Date = DateTime.Now.AddDays(-7), Status = "Present" },
                    new AttendanceRecord { Date = DateTime.Now.AddDays(-14), Status = "Absent" },
                    new AttendanceRecord { Date = DateTime.Now.AddDays(-21), Status = "Present" }
                }
            },
            new ClassItem
            {
                Id = 2,
                Name = "Computer Science 205",
                Instructor = "Prof. Johnson",
                Time = "Tue/Thu 1:00 PM",
                Room = "Tech Center, Room 105",
                Credits = 4,
                AttendanceRecords = new List<AttendanceRecord>
                {
                    new AttendanceRecord { Date = DateTime.Now.AddDays(-5), Status = "Present" },
                    new AttendanceRecord { Date = DateTime.Now.AddDays(-12), Status = "Present" },
                    new AttendanceRecord { Date = DateTime.Now.AddDays(-19), Status = "Absent" }
                }
            },
            new ClassItem
            {
                Id = 3,
                Name = "Computer Science 301",
                Instructor = "Prof. Sam",
                Time = "Fri 1:00 PM",
                Room = "Tech Center, Room 301",
                Credits = 4,
                AttendanceRecords = new List<AttendanceRecord>
                {
                    new AttendanceRecord { Date = DateTime.Now.AddDays(-5), Status = "Present" },
                    new AttendanceRecord { Date = DateTime.Now.AddDays(-12), Status = "Present" },
                    new AttendanceRecord { Date = DateTime.Now.AddDays(-19), Status = "Absent" }
                }
            }
        };

        CurrentClass = classes.FirstOrDefault(c => c.Id == Id);

        if (CurrentClass != null)
        {
            DebugMessage = $"Class found: {CurrentClass.Name}";
            PresentDays = CurrentClass.AttendanceRecords.Count(r => r.Status == "Present");
            AbsentDays = CurrentClass.AttendanceRecords.Count(r => r.Status == "Absent");
            AttendancePercentage = Math.Round((double)PresentDays / CurrentClass.AttendanceRecords.Count * 100, 2);
        }
        else
        {
            DebugMessage = "Class not found";
            PresentDays = 0;
            AbsentDays = 0;
            AttendancePercentage = 0;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                await JSRuntime.InvokeVoidAsync("console.log", "OnAfterRenderAsync - First render");
            }
            catch (Exception ex)
            {
                DebugMessage += $" (JS Error: {ex.Message})";
            }
            DebugMessage = "Rendered successfully";
            StateHasChanged();
        }
    }

    private bool ShouldShowAddAttendanceButton()
    {
        if (CurrentClass == null) return false;

        var classTime = CurrentClass.Time;
        var today = DateTime.Now;

        if (classTime.Contains("Mon/Wed") && (today.DayOfWeek == DayOfWeek.Monday || today.DayOfWeek == DayOfWeek.Wednesday))
        {
            return IsWithinOneHour(classTime, "Mon/Wed", today);
        }
        else if (classTime.Contains("Tue/Thu") && (today.DayOfWeek == DayOfWeek.Tuesday || today.DayOfWeek == DayOfWeek.Thursday))
        {
            return IsWithinOneHour(classTime, "Tue/Thu", today);
        }
        else if (classTime.Contains("Fri") && (today.DayOfWeek == DayOfWeek.Friday ))
        {
            return true;
        }

        return false;
    }

    private bool IsWithinOneHour(string classTime, string days, DateTime today)
    {
        var timePart = classTime.Replace(days, "").Trim();
        if (DateTime.TryParseExact(timePart, "h:mm tt", CultureInfo.InvariantCulture, DateTimeStyles.None, out DateTime classDateTime))
        {
            var classToday = new DateTime(today.Year, today.Month, today.Day, classDateTime.Hour, classDateTime.Minute, 0);
            return today >= classToday.AddHours(-1) && today <= classToday.AddHours(1);
        }
        return false;
    }

    private void TestButtonClick()
    {
        DebugMessage = "Test Button Pressed";
        StateHasChanged();
    }

    private void AddAttendanceRecordWithLogging()
    {
        StateHasChanged();
        AddAttendanceRecord();
    }

    private async Task AddAttendanceRecord()
    {
        if (CurrentClass == null)
        {
            DebugMessage = "No class selected.";
            StateHasChanged();
            return;
        }

        DebugMessage = "Processing attendance record...";
        StateHasChanged();

        try
        {
            var today = DateTime.Now.Date;
            if (!CurrentClass.AttendanceRecords.Any(r => r.Date.Date == today))
            {
                CurrentClass.AttendanceRecords.Add(new AttendanceRecord
                {
                    Date = today,
                    Status = "Present"
                });
                
                PresentDays = CurrentClass.AttendanceRecords.Count(r => r.Status == "Present");
                AbsentDays = CurrentClass.AttendanceRecords.Count(r => r.Status == "Absent");
                AttendancePercentage = Math.Round((double)PresentDays / CurrentClass.AttendanceRecords.Count * 100, 2);
                
                DebugMessage = $"Record added. Total records: {CurrentClass.AttendanceRecords.Count}";
                
                try
                {
                    await JSRuntime.InvokeVoidAsync("console.log", $"Added attendance record. New count: {CurrentClass.AttendanceRecords.Count}");
                }
                catch (Exception jsEx)
                {
                    DebugMessage += $" (JS Error: {jsEx.Message})";
                }
            }
            else
            {
                DebugMessage = "Attendance record for today already exists.";
            }
        }
        catch (Exception ex)
        {
            DebugMessage = $"Error adding record: {ex.Message}";
        }
        
        StateHasChanged();
    }

    public class ClassItem
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public string Instructor { get; set; } = string.Empty;
        public string Time { get; set; } = string.Empty;
        public string Room { get; set; } = "Unknown";
        public int Credits { get; set; }
        public List<AttendanceRecord> AttendanceRecords { get; set; } = new List<AttendanceRecord>();
    }

    public class AttendanceRecord
    {
        public DateTime Date { get; set; }
        public required string Status { get; set; } = "Absent";
    }
}