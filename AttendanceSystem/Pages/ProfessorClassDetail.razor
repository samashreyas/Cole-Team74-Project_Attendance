@* Professor Individual Class Detail Page, once a class is clicked on the Professor Dashboard *@
@* Has Frontend for Quiz Question Selection, Add New Quiz Question, Attendance Summary, Mark all students for the day or previous Individual Dates as Present/Absent, List all Enrolled Students *@
@* Made by Steven Maddela *@

@page "/professor/class/{Id:int}"
@using Microsoft.EntityFrameworkCore
@using AttendanceSystem.Data.Models
@inject AttendanceDbContext DbContext

//Button, Table, and Font Styling
<style>
    .blue-button {
        background-color: #3b82f6;
        color: white;
        padding: 0.5rem 1rem;
        border-radius: 0.25rem;
        transition: background-color 0.2s;
    }

    .blue-button:hover {
        background-color: #2563eb;
    }

    table {
        border-collapse: collapse;
        margin-left: 1.25rem;
    }

    th, td {
        border: 1px solid #e5e7eb;
        padding: 0.75rem;
        text-align: left;
    }

    h2.text-xl {
        margin-left: 1.25rem;
        margin-top: 1rem;
    }

    thead th {
        background-color: #f3f4f6;
        border-bottom: 1px solid #8aa6d1;
    }

    tbody tr {
        background-color: #f9f9f9;
    }

    tbody tr:nth-child(even) {
        background-color: #f9f9f9;
    }

    .content-indented {
        margin-left: 1.25rem;
    }

    select {
        padding: 0.25rem;
        border-radius: 0.25rem;
        border: 1px solid #d1d5db;
    }

    
</style>

<div class="container mx-auto p-4">
    <h1 class="text-2xl font-bold mb-4">@CurrentClass?.Name - Manage Attendance</h1>
    <div class="mb-4">

</div>


    @if (CurrentClass != null)
    {
        
        <div class="bg-white border rounded-lg p-6 mb-6 space-y-4">
//Question Selection Section
            
            <div class="mb-4">
                <h2 class="text-xl font-semibold mb-3">Quiz Question Selection</h2>
                <div class="content-indented">
                    <div class="flex items-center gap-4">
                        <select @bind="selectedQuestionText" class="w-64">
                            <option value="">-- Select a question --</option>
                            @foreach (var question in ClassQuestions)
                            {
                                <option value="@question.QuestionText">@question.QuestionText</option>
                            }
                        </select>
                        <button @onclick="SelectQuestion" class="blue-button content-indented">
                            Select Question
                        </button>
                    </div>
                    
                    @if (!string.IsNullOrEmpty(selectedQuestionMessage))
                    {
                        <div class="mt-2 @(isSuccess ? "text-green-600" : "text-red-600")">
                            @selectedQuestionMessage
                        </div>
                    }
                    
                    @if (SelectedQuestion != null)
                    {
                        <div class="mt-4 p-4 bg-blue-50 border border-blue-200 rounded">
                            <p class="font-semibold">Currently Selected Question:</p>
                            <p class="mt-2">@SelectedQuestion.QuestionText</p>
                        </div>
                    }
                </div>
            </div>

//Add New Question Section
            <div class="mb-6">
                <div class="content-indented">
                    @if (!ShowAddQuestionForm)
                    {
                        <button class="blue-button" @onclick="() => ShowAddQuestionForm = true">Add New Question</button>
                    }
                    else
                    {
                        <div class="border rounded p-4 bg-gray-50 max-w-lg">
                            <h3 class="font-semibold mb-2">Add a New Question</h3>
                            <div class="mb-2">
                                <label class="block font-medium mb-1">Question</label>
                                <input class="w-full border rounded p-2" @bind="NewQuestionText" />
                            </div>
                            <div class="mb-2">
                                <label class="block font-medium mb-1">Answer Choice 1</label>
                                <input class="w-full border rounded p-2" @bind="NewAnswer1" />
                            </div>
                            <div class="mb-2">
                                <label class="block font-medium mb-1">Answer Choice 2</label>
                                <input class="w-full border rounded p-2" @bind="NewAnswer2" />
                            </div>
                            <div class="mb-2">
                                <label class="block font-medium mb-1">Answer Choice 3</label>
                                <input class="w-full border rounded p-2" @bind="NewAnswer3" />
                            </div>
                            <div class="mb-2">
                                <label class="block font-medium mb-1">Answer Choice 4</label>
                                <input class="w-full border rounded p-2" @bind="NewAnswer4" />
                            </div>
                            <div class="mb-2">
                                <label class="block font-medium mb-1">Correct Answer (A, B, C, or D)</label>
                                <input class="w-24 border rounded p-2" @bind="NewCorrectAnswer" maxlength="1" />
                            </div>
                            <div class="flex gap-2 mt-4">
                                <button class="blue-button" @onclick="AddQuestion">Submit</button>
                                <button class="px-4 py-2 bg-gray-300 rounded" @onclick="CancelAddQuestion">Cancel</button>
                            </div>
                            @if (!string.IsNullOrEmpty(AddQuestionMessage))
                            {
                                <div class="mt-2 @(AddQuestionSuccess ? "text-green-600" : "text-red-600")">
                                    @AddQuestionMessage
                                </div>
                            }
                        </div>
                    }
                </div>
            </div>

//Attendance Summary Section

            <div class="mb-3">
                <h2 class="text-xl font-semibold mb-3">Attendance Summary</h2>
                <div class="content-indented">
                    <p class="mb-1"><strong>Total Students:</strong> @CurrentClass.Students.Count</p>
                    <p class="mb-1"><strong>Present Today:</strong> @CurrentClass.Students.Count(s => s.AttendanceRecords.Any(r => r.Date.Date == DateTime.Today && r.Status == "Present"))</p>
                    <p><strong>Absent Today:</strong> @CurrentClass.Students.Count(s => s.AttendanceRecords.Any(r => r.Date.Date == DateTime.Today && r.Status == "Absent"))</p>
                </div>
            </div>

//Professor Edit Attendance Section
//Set all attendance for all students for the day as present/absent

            <div class="mb-4">
                <h2 class="text-xl font-semibold mb-3">Record Attendance</h2>
                <div class="content-indented">
                    <button @onclick="AddTodayAttendanceForAll" class="blue-button mr-2">
                        Mark All Present
                    </button>
                    <button @onclick="RemoveTodayAttendanceForAll" class="blue-button">
                        Mark All Absent
                    </button>
                </div>
            </div>

//Allows Professor to set attendance for any student for any day as present/absent

            <div>
                <h2 class="text-xl font-semibold mb-3">Attendance Details</h2>
                <table class="w-full">
                    <thead>
                        <tr>
                            <th>Date</th>
                            @foreach (var student in CurrentClass.Students)
                            {
                                <th>@student.Name</th>
                            }
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var date in DistinctAttendanceDates.OrderByDescending(d => d))
                        {
                            <tr>
                                <td>@date.ToString("MM/dd/yyyy")</td>
                                @foreach (var student in CurrentClass.Students)
                                {
                                    var record = student.AttendanceRecords.FirstOrDefault(r => r.Date.Date == date.Date);
                                    <td class="text-center">
                                        <select @onchange="(e) => UpdateAttendanceStatus(student, date, e.Value?.ToString())">
                                            <option value="Present" selected="@(record?.Status == "Present")">Present</option>
                                            <option value="Absent" selected="@(record?.Status == "Absent")">Absent</option>
                                        </select>
                                    </td>
                                }
                            </tr>
                        }
                    </tbody>
                </table>
                <div class="content-indented mt-4 mb-4">
                    <button @onclick="SaveAttendanceChanges" class="blue-button">
                        Save Attendance Changes
                    </button>
                </div>
            </div>
        </div>

        <div class="bg-white border rounded-lg p-6">
            <h2 class="text-xl font-semibold mb-3">Enrolled Students</h2>
            <div class="mb-4">
                <table class="w-full">
                    <thead>
                        <tr>
                            <th>Name</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var student in CurrentClass.Students)
                        {
                            <tr>
                                <td>@student.Name</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    }
    else
    {
        <p class="text-red-600">Class not found.</p>
    }
</div>

@code {
// Route parameter for Class ID
    [Parameter]
    public int Id { get; set; }
// Class-level state variables   
    private ClassItem? CurrentClass { get; set; }
    private HashSet<DateTime> DistinctAttendanceDates { get; set; } = new();
    private List<QuestionItem> ClassQuestions { get; set; } = new();
    private QuestionItem? SelectedQuestion { get; set; }
    private string selectedQuestionText { get; set; } = "";
    private string selectedQuestionMessage = "";
    private bool isSuccess = false;

// Add Question Form State
    private bool ShowAddQuestionForm { get; set; } = false;
    private string NewQuestionText { get; set; } = "";
    private string NewAnswer1 { get; set; } = "";
    private string NewAnswer2 { get; set; } = "";
    private string NewAnswer3 { get; set; } = "";
    private string NewAnswer4 { get; set; } = "";
    private string NewCorrectAnswer { get; set; } = "";
    private string AddQuestionMessage { get; set; } = "";
    private bool AddQuestionSuccess { get; set; } = false;


//On initialized, Load current class info, enrolled students, attendance records, and quiz questions from database
    protected override async Task OnInitializedAsync()
    {
        var dbClass = await DbContext.Classes
            .Include(c => c.Instructor)
            .FirstOrDefaultAsync(c => c.ClassID == Id);

        if (dbClass != null)
        {
            var enrolledStudents = await DbContext.StudentCourses
                .Where(sc => sc.ClassID == Id)
                .Join(DbContext.Students,
                    sc => sc.StudentID,
                    s => s.StudentID,
                    (sc, s) => s)
                .ToListAsync();

            var classAttendance = await DbContext.AttendanceRecords
                .Where(ar => ar.ClassID == Id)
                .ToListAsync();

            var students = enrolledStudents.Select(s => new StudentItem
            {
                Name = s.FirstName + " " + s.LastName,
                StudentID = s.StudentID,
                AttendanceRecords = classAttendance
                    .Where(ar => ar.StudentID == s.StudentID)
                    .Select(ar => new AttendanceRecord
                    {
                        Date = ar.Date,
                        Status = ar.Status,
                        ClassID = ar.ClassID,
                        StudentID = ar.StudentID
                    }).ToList()
            }).ToList();

            CurrentClass = new ClassItem
            {
                ClassID = dbClass.ClassID,
                Name = dbClass.Name,
                Students = students
            };
            DistinctAttendanceDates = classAttendance.Select(ar => ar.Date.Date).ToHashSet();

            await LoadQuestions();
        }
    }

// Helper method to load questions for the current class from the database
    private async Task LoadQuestions()
    {
        // Get questions for this class from the database
        var questions = await DbContext.Questions
            .Where(q => q.ClassID == Id)
            .Select(q => new QuestionItem
            {
                QuestionText = q.QuestionText,
                ClassID = q.ClassID,
                Selected = q.Selected
            })
            .ToListAsync();

        ClassQuestions = questions;

        // Find currently selected question for the day
        SelectedQuestion = questions.FirstOrDefault(q => q.Selected);
    }

// Helper method to handle selection of a question from the question bank as the "current" one for the day
    private async Task SelectQuestion()
    {
        if (string.IsNullOrEmpty(selectedQuestionText))
        {
            selectedQuestionMessage = "Please select a question first.";
            isSuccess = false;
            return;
        }

        try
        {
            // Reset all questions to not selected
            var questionsToUpdate = await DbContext.Questions
                .Where(q => q.ClassID == Id)
                .ToListAsync();

            foreach (var q in questionsToUpdate)
            {
                q.Selected = (q.QuestionText == selectedQuestionText);
            }

            await DbContext.SaveChangesAsync();

            // Refresh question list
            await LoadQuestions();

            selectedQuestionMessage = "Question successfully selected.";
            isSuccess = true;
        }
        catch (Exception ex)
        {
            selectedQuestionMessage = $"Error: {ex.Message}";
            isSuccess = false;
        }
    }

// Helper method to add a new question to the class' question bank
    private async Task AddQuestion()
    {
        AddQuestionMessage = "";
        AddQuestionSuccess = false;

        if (string.IsNullOrWhiteSpace(NewQuestionText) ||
            string.IsNullOrWhiteSpace(NewAnswer1) ||
            string.IsNullOrWhiteSpace(NewAnswer2) ||
            string.IsNullOrWhiteSpace(NewAnswer3) ||
            string.IsNullOrWhiteSpace(NewAnswer4) ||
            string.IsNullOrWhiteSpace(NewCorrectAnswer))
        {
            AddQuestionMessage = "All fields are required.";
            AddQuestionSuccess = false;
            return;
        }

        // Serialize choices to JSON string
        var choices = new List<string> { NewAnswer1, NewAnswer2, NewAnswer3, NewAnswer4 };
        var choicesJson = System.Text.Json.JsonSerializer.Serialize(choices);

        var newQuestion = new Question
        {
            QuestionText = NewQuestionText,
            ClassID = Id,
            Selected = false,
            AnswerChoices = choicesJson,
            CorrectAnswer = NewCorrectAnswer.ToUpper()
        };

        try
        {
            // Save to database
            DbContext.Questions.Add(newQuestion);
            await DbContext.SaveChangesAsync();

            AddQuestionMessage = "Question added successfully.";
            AddQuestionSuccess = true;

            // Reset form fields
            NewQuestionText = "";
            NewAnswer1 = "";
            NewAnswer2 = "";
            NewAnswer3 = "";
            NewAnswer4 = "";
            NewCorrectAnswer = "";

            // Reload question list
            await LoadQuestions();

            ShowAddQuestionForm = false;
        }
        catch (Exception ex)
        {
            AddQuestionMessage = $"Error: {ex.Message}";
            AddQuestionSuccess = false;
        }
    }

 // Helper method to cancel the "Add Question" form and clear inputs
    private void CancelAddQuestion()
    {
        ShowAddQuestionForm = false;
        AddQuestionMessage = "";
        NewQuestionText = "";
        NewAnswer1 = "";
        NewAnswer2 = "";
        NewAnswer3 = "";
        NewAnswer4 = "";
        NewCorrectAnswer = "";
    }

// Helper method to add an attendance status for a given student and date
    private void UpdateAttendanceStatus(StudentItem student, DateTime date, string? newStatus)
    {
        if (string.IsNullOrEmpty(newStatus)) return;

        var record = student.AttendanceRecords.FirstOrDefault(r => r.Date.Date == date.Date);
        if (record != null)
        {
            // Update existing record
            record.Status = newStatus;
        }
        else
        {
            // Add new record if not present
            student.AttendanceRecords.Add(new AttendanceRecord
            {
                Date = date,
                Status = newStatus,
                ClassID = Id,
                StudentID = student.StudentID ?? 0
            });
            DistinctAttendanceDates.Add(date.Date);
        }
    }

// Helper method to mark all students as present for today
    private void AddTodayAttendanceForAll()
    {
        foreach (var student in CurrentClass!.Students)
        {
            UpdateAttendanceStatus(student, DateTime.Today, "Present");
        }
    }

// Helper method to mark all students as absent for today
    private void RemoveTodayAttendanceForAll()
    {
        foreach (var student in CurrentClass!.Students)
        {
            UpdateAttendanceStatus(student, DateTime.Today, "Absent");
        }
    }

// Saves attendance records to the database
    private async Task SaveAttendanceChanges()
    {
        if (CurrentClass == null) return;

        foreach (var student in CurrentClass.Students)
        {
            foreach (var record in student.AttendanceRecords)
            {
                var existingRecord = await DbContext.AttendanceRecords
                    .FirstOrDefaultAsync(ar =>
                        ar.ClassID == record.ClassID &&
                        ar.StudentID == record.StudentID &&
                        ar.Date.Date == record.Date.Date);

                if (existingRecord != null)
                {
                    // Update existing attendance
                    existingRecord.Status = record.Status;
                }
                else
                {
                    // Insert new attendance record
                    DbContext.AttendanceRecords.Add(new AttendanceRecord
                    {
                        ClassID = record.ClassID,
                        StudentID = record.StudentID,
                        Date = record.Date.Date,
                        Status = record.Status
                    });
                }
            }
        }

        await DbContext.SaveChangesAsync();
    }

// Helper class representing current and its students
    private class ClassItem
    {
        public int ClassID { get; set; }
        public string Name { get; set; } = "";
        public List<StudentItem> Students { get; set; } = new();
    }

// Helper class representing a student and their attendance records
    private class StudentItem
    {
        public long? StudentID { get; set; }
        public string Name { get; set; } = "";
        public List<AttendanceRecord> AttendanceRecords { get; set; } = new();
    }

// Helper class representing a question for the class
    private class QuestionItem
    {
        public string QuestionText { get; set; } = "";
        public int ClassID { get; set; }
        public bool Selected { get; set; }
    }
}
