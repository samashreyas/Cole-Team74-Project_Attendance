@page "/professor/class/{Id:int}"
@using Microsoft.EntityFrameworkCore
@using AttendanceSystem.Data.Models
@inject AttendanceDbContext DbContext

<style>
    .blue-button {
        background-color: #3b82f6;
        color: white;
        padding: 0.5rem 1rem;
        border-radius: 0.25rem;
        transition: background-color 0.2s;
    }

        .blue-button:hover {
            background-color: #2563eb;
        }

    table {
        border-collapse: collapse;
        margin-left: 1.25rem;
    }

    th, td {
        border: 1px solid #e5e7eb;
        padding: 0.75rem;
        text-align: left;
    }

    h2.text-xl {
        margin-left: 1.25rem;
        margin-top: 1rem;
    }

    thead th {
        background-color: #f3f4f6;
        border-bottom: 1px solid #8aa6d1;
    }

    tbody tr {
        background-color: #f9f9f9;
    }

        tbody tr:nth-child(even) {
            background-color: #f9f9f9;
        }

    .content-indented {
        margin-left: 1.25rem;
    }

    select {
        padding: 0.25rem;
        border-radius: 0.25rem;
        border: 1px solid #d1d5db;
    }
</style>

<div class="container mx-auto p-4">
    <h1 class="text-2xl font-bold mb-4">@CurrentClass?.Name - Manage Attendance</h1>

    @if (CurrentClass != null)
    {
        <div class="bg-white border rounded-lg p-6 mb-6 space-y-4">
            <!-- Question Selection Section -->
            <div class="mb-4">
                <h2 class="text-xl font-semibold mb-3">Question Selection</h2>
                <div class="content-indented">
                    <div class="flex items-center gap-4">
                        <select @bind="selectedQuestionText" class="w-64">
                            <option value="">-- Select a question --</option>
                            @foreach (var question in ClassQuestions)
                            {
                                <option value="@question.QuestionText">@question.QuestionText</option>
                            }
                        </select>
                        <button @onclick="SelectQuestion" class="blue-button">
                            Select Question
                        </button>
                    </div>

                    @if (!string.IsNullOrEmpty(selectedQuestionMessage))
                    {
                        <div class="mt-2 @(isSuccess ? "text-green-600" : "text-red-600")">
                            @selectedQuestionMessage
                        </div>
                    }

                    @if (SelectedQuestion != null)
                    {
                        <div class="mt-4 p-4 bg-blue-50 border border-blue-200 rounded">
                            <p class="font-semibold">Currently Selected Question:</p>
                            <p class="mt-2">@SelectedQuestion.QuestionText</p>
                        </div>
                    }
                </div>
            </div>

            <div class="mb-3">
                <h2 class="text-xl font-semibold mb-3">Attendance Summary</h2>
                <div class="content-indented">
                    <p class="mb-1"><strong>Total Students:</strong> @CurrentClass.Students.Count</p>
                    <p class="mb-1"><strong>Present Today:</strong> @CurrentClass.Students.Count(s => s.AttendanceRecords.Any(r => r.Date.Date == DateTime.Today && r.Status == "Present"))</p>
                    <p><strong>Absent Today:</strong> @CurrentClass.Students.Count(s => s.AttendanceRecords.Any(r => r.Date.Date == DateTime.Today && r.Status == "Absent"))</p>
                </div>
            </div>

            <div class="mb-4">
                <h2 class="text-xl font-semibold mb-3">Record Attendance</h2>
                <div class="content-indented">
                    <button @onclick="AddTodayAttendanceForAll" class="blue-button mr-2">
                        Mark All Present
                    </button>
                    <button @onclick="RemoveTodayAttendanceForAll" class="blue-button">
                        Mark All Absent
                    </button>
                </div>
            </div>

            <div>
                <h2 class="text-xl font-semibold mb-3">Attendance Details</h2>
                <table class="w-full">
                    <thead>
                        <tr>
                            <th>Date</th>
                            @foreach (var student in CurrentClass.Students)
                            {
                                <th>@student.Name</th>
                            }
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var date in DistinctAttendanceDates.OrderByDescending(d => d))
                        {
                            <tr>
                                <td>@date.ToString("MM/dd/yyyy")</td>
                                @foreach (var student in CurrentClass.Students)
                                {
                                    var record = student.AttendanceRecords.FirstOrDefault(r => r.Date.Date == date.Date);
                                    <td class="text-center">
                                        <select @onchange="(e) => UpdateAttendanceStatus(student, date, e.Value?.ToString())">
                                            <option value="Present" selected="@(record?.Status == "Present")">Present</option>
                                            <option value="Absent" selected="@(record?.Status == "Absent")">Absent</option>
                                        </select>
                                    </td>
                                }
                            </tr>
                        }
                    </tbody>
                </table>
                <div class="content-indented mt-4 mb-4">
                    <button @onclick="SaveAttendanceChanges" class="blue-button">
                        Save Attendance Changes
                    </button>
                </div>
            </div>
        </div>

        <div class="bg-white border rounded-lg p-6">
            <h2 class="text-xl font-semibold mb-3">Enrolled Students</h2>
            <div class="mb-4">
                <table class="w-full">
                    <thead>
                        <tr>
                            <th>Name</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var student in CurrentClass.Students)
                        {
                            <tr>
                                <td>@student.Name</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    }
    else
    {
        <p class="text-red-600">Class not found.</p>
    }
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    private ClassItem? CurrentClass { get; set; }
    private HashSet<DateTime> DistinctAttendanceDates { get; set; } = new();
    private List<QuestionItem> ClassQuestions { get; set; } = new();
    private QuestionItem? SelectedQuestion { get; set; }
    private string selectedQuestionText { get; set; } = "";
    private string selectedQuestionMessage = "";
    private bool isSuccess = false;

    private bool _hasLoaded = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!_hasLoaded)
        {
            _hasLoaded = true;

            var dbClass = await DbContext.Classes
                .AsNoTracking()
                .FirstOrDefaultAsync(c => c.ClassID == Id);

            if (dbClass != null)
            {
                CurrentClass = new ClassItem
                    {
                        ClassID = dbClass.ClassID,
                        Name = dbClass.Name
                    };

                var enrolledStudents = await DbContext.StudentCourses
                    .Where(sc => sc.ClassID == Id)
                    .Join(DbContext.Users.Where(u => u.RoleID == 2),
                        sc => sc.StudentID,
                        u => u.UserID,
                        (sc, u) => new StudentItem
                            {
                                Name = $"{u.FirstName} {u.LastName}",
                                StudentID = u.UserID
                            })
                    .ToListAsync();

                var classAttendance = await DbContext.AttendanceRecords
                    .Where(ar => ar.ClassID == Id)
                    .ToListAsync();

                foreach (var student in enrolledStudents)
                {
                    student.AttendanceRecords = classAttendance
                        .Where(ar => ar.StudentID == student.StudentID)
                        .Select(ar => new AttendanceRecord
                            {
                                Date = ar.Date,
                                Status = ar.Status
                            })
                        .ToList();
                }

                ClassQuestions = await DbContext.Questions
                    .Where(q => q.ClassID == Id)
                    .Select(q => new QuestionItem
                        {
                            QuestionText = q.QuestionText
                        })
                    .ToListAsync();

                DistinctAttendanceDates = classAttendance
                    .Select(ar => ar.Date.Date)
                    .ToHashSet();

                StateHasChanged(); // force re-render after data loads
            }
        }
    }





    private async Task LoadQuestions()
    {
        // Get questions for this class from the database
        var questions = await DbContext.Questions
            .Where(q => q.ClassID == Id)
            .Select(q => new QuestionItem
                {
                    QuestionText = q.QuestionText,
                    ClassID = q.ClassID,
                    Selected = q.Selected
                })
            .ToListAsync();

        ClassQuestions = questions;

        // Find currently selected question
        SelectedQuestion = questions.FirstOrDefault(q => q.Selected);
    }

    private async Task SelectQuestion()
    {
        if (string.IsNullOrEmpty(selectedQuestionText))
        {
            selectedQuestionMessage = "Please select a question first.";
            isSuccess = false;
            return;
        }

        try
        {
            // First, reset all questions' selected status to 0
            var questionsToUpdate = await DbContext.Questions
                .Where(q => q.ClassID == Id)
                .ToListAsync();

            foreach (var q in questionsToUpdate)
            {
                q.Selected = (q.QuestionText == selectedQuestionText);
            }

            await DbContext.SaveChangesAsync();

            // Reload questions to show changes
            await LoadQuestions();

            selectedQuestionMessage = "Question successfully selected.";
            isSuccess = true;
        }
        catch (Exception ex)
        {
            selectedQuestionMessage = $"Error: {ex.Message}";
            isSuccess = false;
        }
    }

    private void UpdateAttendanceStatus(StudentItem student, DateTime date, string? newStatus)
    {
        if (string.IsNullOrEmpty(newStatus)) return;

        var record = student.AttendanceRecords.FirstOrDefault(r => r.Date.Date == date.Date);
        if (record != null)
        {
            record.Status = newStatus;
        }
        else
        {
            student.AttendanceRecords.Add(new AttendanceRecord
                {
                    Date = date,
                    Status = newStatus,
                    ClassID = Id,
                    StudentID = student.StudentID
                });
            DistinctAttendanceDates.Add(date.Date);
        }
    }

    private void AddTodayAttendanceForAll()
    {
        foreach (var student in CurrentClass!.Students)
        {
            UpdateAttendanceStatus(student, DateTime.Today, "Present");
        }
    }

    private void RemoveTodayAttendanceForAll()
    {
        foreach (var student in CurrentClass!.Students)
        {
            UpdateAttendanceStatus(student, DateTime.Today, "Absent");
        }
    }

    private async Task SaveAttendanceChanges()
    {
        if (CurrentClass == null) return;

        foreach (var student in CurrentClass.Students)
        {
            foreach (var record in student.AttendanceRecords)
            {
                var existingRecord = await DbContext.AttendanceRecords
                    .FirstOrDefaultAsync(ar =>
                        ar.ClassID == record.ClassID &&
                        ar.StudentID == record.StudentID &&
                        ar.Date.Date == record.Date.Date);

                if (existingRecord != null)
                {
                    existingRecord.Status = record.Status;
                }
                else
                {
                    DbContext.AttendanceRecords.Add(new AttendanceRecord
                        {
                            ClassID = record.ClassID,
                            StudentID = record.StudentID,
                            Date = record.Date.Date,
                            Status = record.Status
                        });
                }
            }
        }

        await DbContext.SaveChangesAsync();
    }

    private class ClassItem
    {
        public int ClassID { get; set; }
        public string Name { get; set; } = "";
        public List<StudentItem> Students { get; set; } = new();
    }

    private class StudentItem
    {
        public int StudentID { get; set; }
        public string Name { get; set; } = "";
        public List<AttendanceRecord> AttendanceRecords { get; set; } = new();
    }

    private class QuestionItem
    {
        public string QuestionText { get; set; } = "";
        public int ClassID { get; set; }
        public bool Selected { get; set; }
    }
}