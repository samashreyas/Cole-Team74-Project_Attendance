@page "/professor"
@using Microsoft.EntityFrameworkCore
@using AttendanceSystem.Data.Models
@using System.Security.Claims
@inject AttendanceDbContext DbContext
@inject AuthenticationStateProvider AuthProvider

<PageTitle>My Classes (Professor)</PageTitle>

<div class="max-w-6xl mx-auto p-6">
    <h1 class="text-3xl font-semibold text-gray-800 mb-6 text-center">My Classes</h1>

    @if (ProfessorClasses.Count == 0)
    {
        <p class="text-center text-gray-500">You're not teaching any classes yet.</p>
    }
    else
    {
        <div class="grid gap-6 sm:grid-cols-1 md:grid-cols-2 lg:grid-cols-3">
            @foreach (var classItem in ProfessorClasses)
            {
                <a href="/professor/class/@classItem.ClassID"
                   class="block no-underline text-inherit focus:outline-none focus:ring-2 focus:ring-blue-300">
                    <div class="text-gray-800 border border-gray-300 rounded-xl bg-white p-5 hover:shadow-md transition-shadow duration-200">
                        <h2 class="text-lg font-semibold mb-2">@classItem.Name</h2>
                        <div class="text-sm space-y-1">
                            <p><strong>Time:</strong> @classItem.Time</p>
                            <p><strong>Room:</strong> @classItem.Room</p>
                        </div>
                    </div>
                </a>
            }
        </div>
    }
</div>

@code {
    private List<Class> ProfessorClasses = new();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (!user.Identity?.IsAuthenticated ?? true)
        {
            Console.WriteLine("User not authenticated.");
            return;
        }

        var userIdClaim = user.FindFirst(ClaimTypes.NameIdentifier);
        if (!int.TryParse(userIdClaim?.Value, out int professorId))
        {
            Console.WriteLine("Failed to parse professor ID.");
            return;
        }

        Console.WriteLine($"Loading classes for ProfessorID = {professorId}");

        ProfessorClasses = await DbContext.Classes
            .Where(c => c.InstructorID == professorId)
            .ToListAsync();
    }
}
